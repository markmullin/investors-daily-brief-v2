/**\n * TEST FMP EARNINGS ENDPOINTS\n * \n * This script tests the corrected FMP earnings transcript endpoints\n * to ensure they work properly before running the full application.\n */\n\nimport 'dotenv/config';\nimport fmpService from './src/services/fmpService.js';\n\nconst TEST_SYMBOL = 'AAPL';\n\nasync function testEarningsEndpoints() {\n  console.log('üß™ [EARNINGS TEST] Testing FMP Earnings Endpoints...');\n  console.log(`üìä Testing with symbol: ${TEST_SYMBOL}`);\n  console.log('=' .repeat(60));\n  \n  try {\n    // Test 1: Check FMP API Key\n    console.log('\\n1Ô∏è‚É£ Testing FMP API Connection...');\n    const testConnection = await fmpService.testConnection();\n    console.log('‚úÖ FMP API Connection:', testConnection.success ? 'SUCCESS' : 'FAILED');\n    \n    // Test 2: Get Transcript Dates (this tells us if transcripts are available)\n    console.log('\\n2Ô∏è‚É£ Testing Transcript Dates Endpoint...');\n    try {\n      const response = await fetch(`https://financialmodelingprep.com/api/v4/earning_call_transcript?symbol=${TEST_SYMBOL}&apikey=${process.env.FMP_API_KEY}`);\n      const transcriptDates = await response.json();\n      \n      if (response.ok) {\n        console.log('‚úÖ Transcript Dates Retrieved:', transcriptDates.length, 'available');\n        if (transcriptDates.length > 0) {\n          console.log('üìÖ Sample transcript date:', {\n            quarter: transcriptDates[0].quarter,\n            year: transcriptDates[0].year,\n            date: transcriptDates[0].date\n          });\n        }\n      } else {\n        console.log('‚ùå Transcript Dates Error:', transcriptDates);\n        if (transcriptDates.error && transcriptDates.error.includes('premium')) {\n          console.log('üí∞ Note: Earnings transcripts require FMP Premium subscription');\n        }\n      }\n    } catch (error) {\n      console.log('‚ùå Transcript Dates Request Failed:', error.message);\n    }\n    \n    // Test 3: Get Individual Transcript (if dates available)\n    console.log('\\n3Ô∏è‚É£ Testing Individual Transcript Endpoint...');\n    try {\n      const response = await fetch(`https://financialmodelingprep.com/api/v3/earning_call_transcript/${TEST_SYMBOL}?quarter=4&year=2023&apikey=${process.env.FMP_API_KEY}`);\n      const transcript = await response.json();\n      \n      if (response.ok && transcript && transcript.length > 0) {\n        console.log('‚úÖ Transcript Retrieved:', {\n          symbol: transcript[0].symbol,\n          quarter: transcript[0].quarter,\n          year: transcript[0].year,\n          contentLength: transcript[0].content ? transcript[0].content.length : 0\n        });\n        if (transcript[0].content) {\n          console.log('üìÑ Content preview:', transcript[0].content.substring(0, 200) + '...');\n        }\n      } else {\n        console.log('‚ùå Transcript Error:', transcript);\n        if (transcript.error && transcript.error.includes('premium')) {\n          console.log('üí∞ Note: Individual transcripts require FMP Premium subscription');\n        }\n      }\n    } catch (error) {\n      console.log('‚ùå Individual Transcript Request Failed:', error.message);\n    }\n    \n    // Test 4: Get Earnings Calendar\n    console.log('\\n4Ô∏è‚É£ Testing Earnings Calendar Endpoint...');\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const futureDate = new Date();\n      futureDate.setMonth(futureDate.getMonth() + 3);\n      const future = futureDate.toISOString().split('T')[0];\n      \n      const response = await fetch(`https://financialmodelingprep.com/api/v3/earning_calendar?from=${today}&to=${future}&apikey=${process.env.FMP_API_KEY}`);\n      const calendar = await response.json();\n      \n      if (response.ok && Array.isArray(calendar)) {\n        const symbolEarnings = calendar.filter(e => e.symbol === TEST_SYMBOL);\n        console.log('‚úÖ Earnings Calendar Retrieved:', calendar.length, 'total earnings');\n        console.log(`üìÖ ${TEST_SYMBOL} upcoming earnings:`, symbolEarnings.length);\n        if (symbolEarnings.length > 0) {\n          console.log('üìä Next earnings:', {\n            date: symbolEarnings[0].date,\n            time: symbolEarnings[0].time,\n            epsEstimated: symbolEarnings[0].epsEstimated\n          });\n        }\n      } else {\n        console.log('‚ùå Earnings Calendar Error:', calendar);\n      }\n    } catch (error) {\n      console.log('‚ùå Earnings Calendar Request Failed:', error.message);\n    }\n    \n    // Test 5: Get Analyst Estimates\n    console.log('\\n5Ô∏è‚É£ Testing Analyst Estimates Endpoint...');\n    try {\n      const response = await fetch(`https://financialmodelingprep.com/api/v3/analyst-estimates/${TEST_SYMBOL}?apikey=${process.env.FMP_API_KEY}`);\n      const estimates = await response.json();\n      \n      if (response.ok && Array.isArray(estimates) && estimates.length > 0) {\n        console.log('‚úÖ Analyst Estimates Retrieved:', estimates.length, 'estimates');\n        console.log('üìä Latest estimate:', {\n          date: estimates[0].date,\n          estimatedEpsAvg: estimates[0].estimatedEpsAvg,\n          estimatedRevenueAvg: estimates[0].estimatedRevenueAvg,\n          numberAnalysts: estimates[0].numberAnalystsEstimatedEps\n        });\n      } else {\n        console.log('‚ùå Analyst Estimates Error:', estimates);\n      }\n    } catch (error) {\n      console.log('‚ùå Analyst Estimates Request Failed:', error.message);\n    }\n    \n    // Test 6: Test our enhanced service methods\n    console.log('\\n6Ô∏è‚É£ Testing Enhanced Service Methods...');\n    try {\n      console.log('üîÑ Testing getEarningsTranscripts...');\n      const transcripts = await fmpService.getEarningsTranscripts(TEST_SYMBOL);\n      console.log('üìÑ Transcripts result:', transcripts.length, 'transcripts found');\n      if (transcripts.length > 0) {\n        console.log('üìã Sample transcript:', {\n          quarter: transcripts[0].quarter,\n          year: transcripts[0].year,\n          status: transcripts[0].status,\n          hasContent: !!transcripts[0].content\n        });\n      }\n    } catch (error) {\n      console.log('‚ùå Enhanced Service Method Failed:', error.message);\n    }\n    \n    // Test 7: Test comprehensive analysis\n    console.log('\\n7Ô∏è‚É£ Testing Comprehensive Earnings Analysis...');\n    try {\n      console.log('üîÑ Testing getComprehensiveEarningsAnalysis...');\n      const comprehensive = await fmpService.getComprehensiveEarningsAnalysis(TEST_SYMBOL);\n      console.log('üìä Comprehensive analysis result:', {\n        transcriptsCount: comprehensive.transcripts.length,\n        hasNextEarnings: !!comprehensive.nextEarningsDate,\n        hasEstimates: comprehensive.analystEstimates.length > 0,\n        dataQuality: comprehensive.dataQuality.overallScore\n      });\n    } catch (error) {\n      console.log('‚ùå Comprehensive Analysis Failed:', error.message);\n    }\n    \n    console.log('\\n' + '=' .repeat(60));\n    console.log('‚úÖ FMP Earnings Endpoints Test Complete!');\n    console.log('\\nüí° Key Findings:');\n    console.log('   ‚Ä¢ If you see \"premium required\" errors, that\\'s expected on free tier');\n    console.log('   ‚Ä¢ Earnings calendar and analyst estimates should work on free tier');\n    console.log('   ‚Ä¢ Transcript content requires FMP Premium subscription');\n    console.log('   ‚Ä¢ The system will gracefully handle missing transcript data');\n    \n  } catch (error) {\n    console.error('üí• Test failed with error:', error);\n  }\n}\n\n// Run the test\ntestEarningsEndpoints();\n